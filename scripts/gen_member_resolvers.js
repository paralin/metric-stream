var processMessage = require("./build_types.js").processMessage;

const primitives = [
  "string",
  "int32",
  "uint32",
  "double",
  "float",
  // long? XXX
  "int64",
  "uint64",
  "sint32",
  "sint64",
  "fixed32",
  "fixed64",
  "sfixed32",
  "sfixed64",
  "bool",
  // base64? XXX
  "bytes",
];

function buildMemberResolvers(defs) {
  var types = {};

  processMessage(types, defs);

  var result = "/* Auto generated by 'npm run gen-proto' */\n";
  result += "export const MemberResolvers = {\n";
  for (var typen in types) {
    var type = types[typen];
    if (type.isEnum) {
      continue;
    }

    var typVarN = typen.toLowerCase();
    result += "  " + typen + ": {\n"
    for (var fieldn in type) {
      if (primitives.indexOf(type[fieldn].type) !== -1) {
        continue;
      }
      result += "    " + fieldn + "(" + typVarN + ") {\n";
      result += "      return " + typVarN + "." + fieldn + ";\n";
      result += "    },\n"
    }
    result += "  },\n";
  }
  result += "};";
  console.log(result);
}

(function() {
  var data = "";
  process.stdin.resume();
  process.stdin.on('data', function(buf) { data += buf.toString(); });
  process.stdin.on('end', function() {
    buildMemberResolvers(JSON.parse(data));
  });
})();
